use std::str::FromStr;
use dice_bot::commands::*;

grammar;

Int: i64 =
{
    <s:r"[0-9]+"> => i64::from_str(s).unwrap()                      
}

Expr0: i64 = 
{
    Int,
    "(" <e: Expr> ")" => e,
    
}
Expr1: i64 =
{
    Expr0,
//    RollWord <e: Expr1> => dice(e),
    <nb: Expr1> RollWord <e: Expr0> =>
    {
        (0..nb).map(|_| dice(e)).sum()
    }
}

Expr2: i64 =
{
    Expr1,
    <a: Expr2> "*" <b: Expr1> => a*b,
    <a: Expr2> "/" <b: Expr1> => a*b,
}

Expr3: i64 =
{
    Expr2,
    <a: Expr3> "+" <b: Expr2> => a+b,
    <a: Expr3> "-" <b: Expr2> => a-b,
}

Expr: i64 =
{
    Expr3
}

Comp: (i64, i64, i64, bool) =
{
    <a: Expr> ">" <b: Expr> => (a, b, a-b, a>b),
    <a: Expr> "<" <b: Expr> => (a, b, b-a, a<b),
    <a: Expr> ">=" <b: Expr> => (a, b, a-b, a>=b),
    <a: Expr> "<=" <b: Expr> => (a, b, b-a, a<=b),
}

Str: String =
{
        <s:r#""[^"]*""#> => format!("{}", s),
        <s:r#"'[^']*'"#> => format!("{}", s)
}

RollWord = {"roll", "d"};
Warhammer = {"warhammer", "wh"};
Coupable = "coupable";
Shadowrun = {"shadowrun", "sr"};
Degenesis = {"dege", "dg", "degenesis"};
Trudvang = {"trudvang", "trud", "trv"};
TrudvangJO = {"jo"};
Help = {"h", "help", "wtf", "nani", "nani the fuck"};
Brigandine = {"br", "brig", "brigandine"};

CmdSep = ";";

CommentSep = ":";


Bonus = {"bonus", "bon"};
Malus = {"malus", "mal"};

TrudvangJOInt: i64 =
{
    TrudvangJO <i: Int> => i
}

Modifier: i64 =
{
    Bonus <e: Expr> => e,
    Malus <e: Expr> => -e,
    
}


pub Cmd: Command =
{
    Warhammer <score: Expr> => Command::Warhammer{score: score},
    Coupable => Command::Coupable,
    Shadowrun <n: Expr> <goal: Expr> => Command::Shadowrun(n, Some(goal)),
    Shadowrun <n: Expr>  => Command::Shadowrun(n, None),
    
    Degenesis <n: Expr> <goal: Expr> => Command::Degenesis(n, Some(goal)),
    Degenesis <n: Expr>  => Command::Degenesis(n, None),

    Trudvang <n: Int?> <jo: TrudvangJOInt?> <bonus: Modifier?> =>
        Command::Trudvang(n.unwrap_or(1), jo.unwrap_or(11), bonus.unwrap_or(0)),
    
    Help => Command::Help,
    "say" + <Str> => Command::Say(<>),
    Brigandine => Command::Brigandine{explode_tresh: 10},
    Brigandine <tresh: Expr> => Command::Brigandine{explode_tresh: tresh},
    Expr => Command::Say(format!("{}", <>)),
    <com: Str> CommentSep <cmd :Cmd> =>
        Command::CommentedCmd(String::from(com), Box::new(cmd)),
    <cmp: Comp> => Command::Say(
        if cmp.3 {format!("{} pour {}: Réussite de {}", cmp.0, cmp.1, cmp.2.abs())}
        else {format!("{} pour {}: Échec de {}", cmp.0, cmp.1, cmp.2.abs())})

}


pub CmdList: Command =
{
    Cmd => Command::CmdList(vec![<>]),
    
    <lcmd: CmdList> CmdSep <cmd: Cmd> => if let Command::CmdList(v) = lcmd
    {
        let mut v = v;
        v.push(cmd);
        Command::CmdList(v)        
    }
    else
    {
        unreachable!()
    }
}
